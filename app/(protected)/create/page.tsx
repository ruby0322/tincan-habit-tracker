"use client";
import { generateHabitReminder } from "@/actions/generation";
import { createHabit } from "@/actions/habit";
import { getUserProfile } from "@/actions/user";
import { Skeleton } from "@/components/ui/skeleton";
import { createClient } from "@/utils/supabase/client";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { useState } from "react";
import CreateForm from "./create-form";

const CreatePage = () => {
  const today = new Date();
  const router = useRouter();

  const [loading, setLoading] = useState<boolean>(false);
  const [imageUrl, setImageUrl] = useState<string>("");
  const [userId, setUserId] = useState<string>("");
  const [title, setTitle] = useState<string>("");
  const [message, setMessage] = useState<string>("");
  const [numDailyGoalUnit, setnumDailyGoalUnit] = useState<number>(0);
  const [dailyGoalUnit, setDailyGoalUnit] = useState<string>("");
  const [startDate, setStartDate] = useState<Date>(today);
  const [endDate, setEndDate] = useState<Date>(today);
  const [frequency, setFrequency] = useState<{ [weekday: string]: boolean }>({
    Mon: false,
    Tue: false,
    Wed: false,
    Thu: false,
    Fri: false,
    Sat: false,
    Sun: false,
  });

  const fetchData = async (title: string, goal: string) => {
    setLoading(true);

    // get user_id
    const supabase = createClient();
    const { data: user } = await supabase.auth.getUser();
    user.user?.id === undefined ? setUserId("") : setUserId(user.user?.id);
    console.log(user.user?.id);

    if (user.user?.id != undefined) {
      // message
      const profile = await getUserProfile(user.user?.id);
      const res = await generateHabitReminder(profile.username, title, goal);
      setMessage(res);

      let imageUrlTest = "";

      // image
      try {
        const response = await fetch("/api/generation/image", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            title,
          }),
        });

        if (!response.ok) {
          throw new Error("Network response was not ok");
        }

        const data = await response.json();
        setImageUrl(data.imageUrl); // Assuming the server responds with { imageUrl: '...' }
        imageUrlTest = data.imageUrl;
      } catch (error) {
        console.error("Failed to fetch:", error);
        setImageUrl(""); // Handle error: reset response or set an error message
      } finally {
        setLoading(false);
        console.log("freq:", frequency);
        await createHabit(
          user.user?.id,
          title,
          imageUrlTest,
          res,
          numDailyGoalUnit,
          dailyGoalUnit,
          startDate,
          endDate,
          frequency
        );
        router.push("/manage");
      }
    }
  };

  return (
    <div className='flex items-center justify-center flex-col gap-8 pt-4'>
      {loading ? (
        <>
          <div>錫罐圖片生成中......</div>
          <Skeleton className='h-[256px] w-[256px] rounded' />
        </>
      ) : (
        imageUrl && (
          <Image
            height='256'
            width='256'
            src={imageUrl}
            alt='Tin can image generated by DALLE'
          />
        )
      )}

      <CreateForm
        title={title}
        titleSetter={setTitle}
        numDailyGoalUnit={numDailyGoalUnit}
        numDailyGoalUnitSetter={setnumDailyGoalUnit}
        dailyGoalUnit={dailyGoalUnit}
        dailyGoalUnitSetter={setDailyGoalUnit}
        startDate={startDate}
        startDateSetter={setStartDate}
        endDate={startDate}
        endDateSetter={setEndDate}
        frequency={frequency}
        frequencySetter={setFrequency}
        onSubmit={() => {
          fetchData(title, numDailyGoalUnit.toString() + `(${dailyGoalUnit})`);
          console.log(
            "after create habit",
            userId,
            title,
            imageUrl,
            message,
            numDailyGoalUnit,
            dailyGoalUnit,
            startDate,
            endDate,
            frequency
          );
        }}
      />
    </div>
  );
};

export default CreatePage;
