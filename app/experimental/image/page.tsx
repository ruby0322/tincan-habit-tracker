"use client";
import { Skeleton } from "@/components/ui/skeleton";
import Image from "next/image";
import { useState } from "react";
import ImageForm from "./image-form";

const ImagePage = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [responseUrl, setResponseUrl] = useState<string>("");
  const [title, setTitle] = useState<string>("打羽球");
  const [completionStreak, setCompletionStreak] = useState<number>(0);
  const [failureStreak, setFailureStreak] = useState<number>(0);

  const fetchData = async (
    title: string,
    completionStreak: number,
    failureStreak: number
  ) => {
    setLoading(true);
    try {
      const response = await fetch("/api/generation/image", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          title,
          completionStreak,
          failureStreak,
        }),
      });

      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const data = await response.json();
      setResponseUrl(data.imageUrl); // Assuming the server responds with { imageUrl: '...' }
    } catch (error) {
      console.error("Failed to fetch:", error);
      setResponseUrl(""); // Handle error: reset response or set an error message
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className='flex items-center justify-center flex-col gap-8'>
      {loading ? (
        <Skeleton className='h-[256px] w-[256px] rounded' />
      ) : (
        responseUrl && (
          <Image
            height='256'
            width='256'
            src={responseUrl}
            alt='Tin can image generated by DALLE'
          />
        )
      )}

      <ImageForm
        title={title}
        titleSetter={setTitle}
        completionStreak={completionStreak}
        completionStreakSetter={setCompletionStreak}
        failureStreak={failureStreak}
        failureStreakSetter={setFailureStreak}
        onSubmit={() => {
          fetchData(title, completionStreak, failureStreak);
        }}
      />
    </div>
  );
};

export default ImagePage;
